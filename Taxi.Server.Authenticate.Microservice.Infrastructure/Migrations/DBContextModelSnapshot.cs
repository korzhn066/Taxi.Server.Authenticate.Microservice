// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taxi.Server.Authenticate.Microservice.Infrastructure.Data;

#nullable disable

namespace Taxi.Server.Authenticate.Microservice.Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "9e445865-a24d-4543-a6c6-9443d048cdb9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0e445865-a24d-4543-a6c6-9443d048cdb9",
                            Name = "Driver",
                            NormalizedName = "DRIVER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "1e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "9e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "2e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "3e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "4e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "0e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "4e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "5e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "0e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "6e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        },
                        new
                        {
                            UserId = "7e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "8e445865-a24d-4543-a6c6-9443d048cdb9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NumberRatingChanges")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c008792-9dd6-4718-87cb-4cb7652dff5a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedUserName = "ADMIN",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAECch2lLeq6Vxd4o5RjgiHxKRlue1Q//sWAyUiyhX0w18HPSYK+K875XCMphN0qsj6A==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "8c999248-71c7-4211-9170-e2e762a60a53",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "2e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76986608-9b3a-49c7-926f-bc5288d3a42f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "user1",
                            NormalizedUserName = "USER1",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEFi//6mnXjgNFOFJbWEaJNA7CoJBniSLb3d4IHzwToF7UV40BgeZPVMQV3vWPiGIug==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "411b44e7-df62-49f5-9528-27ee3aa7d508",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "3e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec1001de-855f-4c31-9344-d5b0ebc3d964",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "user2",
                            NormalizedUserName = "USER2",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEMoM0f95ZTNoafbVxfeERg2uKFEspElbLJOV1spkYJ57VutSM82B93806GqAkipuFA==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "c089e7da-b6e1-40f7-aa6f-889c934d6f53",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "4e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "997f53d9-27d1-448c-a224-eec7428dee6f",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "driver1",
                            NormalizedUserName = "DRIVER1",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEGo6y9cG+rbI9940gD+d8rKmio3umjeK98Wlv3zzgSbYFYOGYep1jfcGegd6W0/CiQ==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "4e1970ef-9231-480c-b348-03613e2c0c4a",
                            TwoFactorEnabled = false,
                            UserName = "driver1"
                        },
                        new
                        {
                            Id = "5e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdfaee5f-0b5a-4af9-9366-e653b567118a",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "driver2",
                            NormalizedUserName = "DRIVER2",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEJE4SroJ/9anICFQQy7sNfqKaHeGVujvpHh7BmYyJ8OfsW6y3CfbqVhuCtoALmGLiQ==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "da67b528-1008-4fd4-82e1-28da5e754bf8",
                            TwoFactorEnabled = false,
                            UserName = "driver2"
                        },
                        new
                        {
                            Id = "6e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6f4b427-b454-45da-bd87-dfcb21e1a8af",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "candidate1",
                            NormalizedUserName = "CANDIDATE1",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEHvpAkS/a9tYHpKBmavXVXQ/w6JtgD0/ps4vjuKOXLAoRcitazAmP0/NMynkS1PjbQ==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "fa2e647f-6a46-4817-bdfe-6995373f87e6",
                            TwoFactorEnabled = false,
                            UserName = "candidate1"
                        },
                        new
                        {
                            Id = "7e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9959ac63-3b8a-4d9b-8e43-23f7f8698ac2",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "candidate2",
                            NormalizedUserName = "CANDIDATE2",
                            NumberRatingChanges = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAELg5tnXvp2zR28yuDCR+ZD/igryO+IaHsZIDhMBxVRj0sov7dpa0pOVURXqbJVLTWA==",
                            PhoneNumber = "+375336481213",
                            PhoneNumberConfirmed = false,
                            Rating = 5f,
                            SecurityStamp = "23a30c65-3c97-4022-be1d-6df629806901",
                            TwoFactorEnabled = false,
                            UserName = "candidate2"
                        });
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.CandidateDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("CandidateDrivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "6e445865-a24d-4543-a6c6-9443d048cdb9",
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "7e445865-a24d-4543-a6c6-9443d048cdb9",
                            Message = "Вы не отправили фото прав",
                            Status = 0
                        });
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateDriverId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateDriverId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CandidateDriverId = 1,
                            FilePath = "1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CandidateDriverId = 1,
                            FilePath = "1.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CandidateDriverId = 2,
                            FilePath = "1.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.CandidateDriver", b =>
                {
                    b.HasOne("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithOne("CandidateDriver")
                        .HasForeignKey("Taxi.Server.Authenticate.Microservice.Domain.Entities.CandidateDriver", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.Photo", b =>
                {
                    b.HasOne("Taxi.Server.Authenticate.Microservice.Domain.Entities.CandidateDriver", "CandidateDriver")
                        .WithMany("Photos")
                        .HasForeignKey("CandidateDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CandidateDriver");
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CandidateDriver");
                });

            modelBuilder.Entity("Taxi.Server.Authenticate.Microservice.Domain.Entities.CandidateDriver", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
